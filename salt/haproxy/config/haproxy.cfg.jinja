{% set haproxy = salt["pillar.get"]("haproxy", {}) %}
{% set psf_internal = salt["pillar.get"]("psf_internal_network") %}

{% set ciphers = "ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:3DES:!AES256:!aNULL:!MD5:!DSS:!PSK:!SRP" %}

global
    log /dev/log    local0
    log /dev/log    local1 notice

    chroot /var/lib/haproxy

    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s

    user haproxy
    group haproxy

    daemon

    maxconn 4096

    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    ssl-default-bind-ciphers {{ ciphers }}
    ssl-default-server-ciphers {{ ciphers }}
    ssl-server-verify required

    # increase DH Param bits to match certificate bits
    tune.ssl.default-dh-param 2048

    # lower your record size to improve Time to First Byte (TTFB)
    tune.ssl.maxrecord 1400

    # set inactivity timeout to reset record size (in ms)
    tune.idletimer 1000

defaults
    log     global

    mode    http

    retries 3

    option  dontlognull
    option  httpchk
    option  httplog
    option  http-server-close
    option  forwardfor
    option  splice-auto
    option  redispatch

    balance roundrobin

    timeout connect 5000
    timeout client  50000
    timeout server  50000

    monitor-uri /_haproxy_status

    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http


frontend main
    bind :20000

    # Advertise http/1.1 over NPN to enable TLS False Start
    # TODO: Switch this to alpn once we upgade to a newer OS
    bind :20001 ssl no-sslv3 npn http/1.1 crt /etc/ssl/private/ev.python.org.pem
    bind :20002 ssl no-sslv3 npn http/1.1 crt /etc/ssl/private/hg.python.org.pem
    bind :20003 ssl no-sslv3 npn http/1.1 crt /etc/ssl/private/star.python.org.pem

    # Redirect all HTTP traffic to HTTPS
    redirect scheme https if !{ ssl_fc }

    # At this point, we only support HTTPS traffic on the load balancer, so
    # we'll say that this was forwarded with a protocol of https.
    reqadd X-Forwarded-Proto:\ https

    # Setup our ACLs
    {% for domain, config in haproxy.domains.items() %}
    acl host_{{ config.role }}_{{ config.port }} hdr(host) -i {{ domain }}
    {% endfor %}

    # Dispatch to a backend based on our domain ACLs
    {% for domain, config in haproxy.domains.items() %}
    use_backend {{ config.role }}_{{ config.port }} if host_{{ config.role }}_{{ config.port }}
    {% endfor %}


{% for domain, config in haproxy.domains.items() %}
backend {{ config.role }}_{{ config.port }}
    {% if config.external_backend is defined %}

    reqirep ^Host:.* Host:\ {{ config.external_backend }}
    server {{ config.role }} {{ config.external_backend }}:{{ config.port }} ssl force-tlsv12 verify required verifyhost {{ config.external_backend }} ca-file ca-certificates.crt

    {% else %}

    {% for server, addrs in salt["mine.get"](salt["pillar.get"]("roles:" + config.role, ""), "minealiases.psf_internal", expr_form="compound").items() %}
    {% for addr in addrs %}
    server {{ server }} {{ addr }}:{{ config.port }} check
    {% endfor %}
    {% endfor %}

    {% endif %}
{% endfor %}


{% for name, config in haproxy.listens.items() %}
listen {{ name }}
    bind {{ config.bind }}

    mode {{ config.mode }}

    {% if config.mode == "tcp" %}
    option tcplog
    option tcp-check
    {% endif %}

    {% for server, addrs in salt["mine.get"](salt["pillar.get"]("roles:" + config.role, ""), "minealiases.psf_internal", expr_form="compound").items() %}
    {% for addr in addrs %}
    server {{ server }} {{ addr }}:{{ config.port }} check
    {% endfor %}
    {% endfor %}

{% endfor %}


listen stats
    bind 127.0.0.1:4646
    bind {{ salt["ip_picker.ip_addrs"](cidr=psf_internal)|first }}:4646

    mode            http
    log             global

    stats enable
    stats hide-version
    stats refresh 30s
    stats show-node
    stats uri  /haproxy?stats
