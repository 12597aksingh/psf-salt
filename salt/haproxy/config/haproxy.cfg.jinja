{% set haproxy = salt["pillar.get"]("haproxy", {}) %}

global
        log /dev/log    local0
        log /dev/log    local1 notice

        chroot /var/lib/haproxy

        stats socket /run/haproxy/admin.sock mode 660 level admin
        stats timeout 30s

        user haproxy
        group haproxy

        daemon

        maxconn 4096

        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
        ssl-server-verify required

        tune.ssl.default-dh-param 2048

defaults
        log     global

        mode    http

        retries 3

        option  dontlognull
        option  httpchk
        option  httplog
        option  http-server-close
        option  forwardfor

        balance roundrobin

        timeout connect 5000
        timeout client  50000
        timeout server  50000

        monitor-uri /_haproxy_status

        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http


{% for proto, bind in {"http": ":80", "https": ":443"}.items() %}
frontend {{ proto }}
        bind {{ bind }}

        reqadd X-Forwarded-Proto:\ {{ proto }}

        {% for domain, config in haproxy.http.items() %}
        {% if not "custom_frontends" in config %}
        acl host_{{ domain }} hdr(host) -i {{ domain }}
        {% endif %}
        {% endfor %}

        {% for domain, config in haproxy.http.items() %}
        {% if not "custom_frontends" in config %}
        use_backend {{ domain }} if host_{{ domain }}
        {% endif %}
        {% endfor %}
{% endfor %}


{% for domain, config in haproxy.http.items() %}
{% if "custom_frontends" in config %}
{% for frontend in config.custom_frontends %}
frontend {{ frontend.name }}
        bind {{ frontend.bind }}

        reqadd X-Forwarded-Proto:\ {{ frontend.proto }}

        acl host_{{ domain }} hdr(host) -i {{ domain }}

        use_backend {{ domain }} if host_{{ domain }}
{% endfor %}
{% endif %}
{% endfor %}


{% for domain, config in haproxy.http.items() %}
backend {{ domain }}
        {% for server in config.servers %}
        server {{ server.name }} {{ server.address }}:{{ server.port }} check
        {% endfor %}
{% endfor %}


{% for name, config in haproxy.tcp.items() %}
listen {{ name }}
        bind {{ config.bind }}

        mode tcp

        option tcplog
        option tcp-check

        {% for server in config.servers %}
        server {{ server.name }} {{ server.address }}:{{ server.port }} check
        {% endfor %}
{% endfor %}
